// TimeEffect.tjs
// 
// 0.3  2015/02/10	表示部分だけでなく、全体の色調を変更するよう変更
//			効率化のため、色調レイヤを 128x64 → 256x128 に変更
// 0.2	2013/07/05	loadImages()を一度も実行していないレイヤに対して設定
//			すると、Anim_loadParamが存在せず失敗していたのを修正
// 
// Layerを拡張して、"夜" "昼" "夕"などの時間を指定することで、画面全体の
// 色調を調整する寄生虫プログラム。セーブ・ロードしても、画面全体への
// 色調調整はかかったままになるようにしてある。かなりトリッキーな方法で。
// layer.setCurrentTimeEffect( obj = "bg" ) 



// 現在のオブジェクトはレイヤー毎にAnim_loadParams.timeEffectに記憶する。

// グローバルな時間による色調情報
global.timeInfo = %[
    // 時間情報
    // "bg"が背景、"char"がキャラクタのデータ
    // "昼" => %[  昼は何もしないので定義しない
    // ],

    "夕" => %[
            "bg" => %[
//                "lightColor" => 0xa0ff6010,    // 背景補正光色
                "lightColor" => 0x60b06010,    // 背景補正光色
                "lightType" => ltPsHardLight,  // 背景補正光合成種別
                "brightness" => 0,             // 背景明度補正
                "contrast" => 0,               // 背景コントラスト補正
            ],
            "char" => %[
//                "lightColor" => 0xffff0000,   // キャラ補正光合成色
                "lightColor" => 0x40c02000,   // キャラ補正光合成色
                "lightType" => ltPsSoftLight, // キャラ補正光合成種別
                "brightness" => 0,            // キャラ明度補正
                "contrast" => 0,              // キャラコントラスト補正
            ],
    ],
    "夜屋外" => %[
            "bg" => %[
//                "lightColor" => 0xc0000040,   // 背景補正光合成色
                "lightColor" => 0xb0000040,   // 背景補正光合成色
                "lightType" => ltPsHardLight, // 背景補正光合成種別
                "brightness" => -25,          // 背景明度補正
                "contrast" => -30,            // 背景コントラスト補正
            ],
            "char" => %[
//                "lightColor" => 0xff400080,   // キャラ補正光合成色
                "lightColor" => 0x40400080,   // キャラ補正光合成色
                "lightType" => ltPsSoftLight, // キャラ補正光合成種別
                "brightness" => -20,          // キャラ明度補正
                "contrast" => -30,            // キャラコントラスト補正
            ],
    ],
    "夜屋内" => %[
            "bg" => %[
//                "lightColor" => 0xc0000040,   // 背景補正光合成色
                "lightColor" => 0x90000040,   // 背景補正光合成色
                "lightType" => ltPsSoftLight, // 背景補正光合成種別
                "brightness" => -25,          // 背景明度補正
                "contrast" => -30,            // 背景コントラスト補正
            ],
    ],
    "異界" => %[
            "bg" => %[
                "lightColor" => 0x70c6e5d8,   // 背景補正光合成色
                "lightType" => ltPsHardLight, // 背景補正光合成種別
                "brightness" => -80,          // 背景明度補正
                "contrast" => 10,            // 背景コントラスト補正
            ],
            "char" => %[
                "lightColor" => 0x50c6e5d8,   // 背景補正光合成色
                "lightType" => ltPsHardLight, // 背景補正光合成種別
                "brightness" => -40,          // 背景明度補正
                "contrast" => 0,            // 背景コントラスト補正
            ],
    ],
    "回想" => %[			// セピア色にする
            "bg" => %[
		"grayscale" => true,		// grayscale化する
		"gamma" => %[
			"r" => %[
				"gamma" => 1.3,
//				"floor" => 0,
//				"ceil" => 255,
			],
			"g" => %[
				"gamma" => 1.1,
//				"floor" => 0,
//				"ceil" => 255,
			],
			"b" => %[
				"gamma" => 0.8,
//				"floor" => 0,
//				"ceil" => 255,
			],
		  ]
            ],
            "char" => %[
		"grayscale" => true,		// grayscale化する
		"gamma" => %[
			"r" => %[ "gamma" => 1.3, ],
			"g" => %[ "gamma" => 1.1, ],
			"b" => %[ "gamma" => 0.8, ],
		],
            ],
    ],
];


// fillLayerOperateRect()メソッド。いいのかこんなことして。
// 指定色、指定モードでレイヤを塗る。fillRectよりモードの数が多い。
Layer.fillLayerOperateRect = function(left, top, width, height, color, mode)
{
	// fillLayer は色調を変更するためのテンポラリレイヤ。this と同じ
	// サイズのテンポラリレイヤを作ると無駄なので、このサイズで
	// タイリングする。…ホントにこの方がいいかどうかは不明。
	var tw = 256;
	var th = 128;
	var fillLayer = new global.Layer(window, this);
	fillLayer.setSize(tw, th);
	fillLayer.fillRect(0, 0, tw, th, color);
	var x = left;
	var y = top;
	while (y < top+height) {
		var p = x;
		while (p < left+width) {
			operateRect(p, y, fillLayer,
					0, 0, tw, th, mode, 255);
			p += tw;
		}
		y += th;
	}

	invalidate fillLayer;
};


// レイヤークラスにdrawTimeEffect()メソッドを追加。いいのかこんなことして。
Layer.drawTimeEffect = function(param)
{
	// 値をチェック、何も定義されていなければ何もせず戻る
	if(param === void || param.timeEffect === void)
		return;
	var timeinfo = param.timeEffect;

	// 白黒補正
	if (timeinfo.grayscale)
		doGrayScale();

	// ガンマ補正
	if(timeinfo.gamma !== void) {
		var rg, gg, bg; rg = gg = bg = 1.0;
		var rf, gf, bf; rf = gf = bf = 0;
		var rc, gc, bc; rc = gc = bc = 255;
		var tmp = timeinfo.gamma.r;
		if(tmp !== void) {
			rg = tmp.gamma if(tmp.gamma !== void);
			rf = tmp.floor if(tmp.floor !== void);
			rc = tmp.ceil  if(tmp.ceil  !== void);
		}
		var tmp = timeinfo.gamma.g;
		if(tmp !== void) {
			gg = tmp.gamma if(tmp.gamma !== void);
			gf = tmp.floor if(tmp.floor !== void);
			gc = tmp.ceil  if(tmp.ceil  !== void);
		}
		var tmp = timeinfo.gamma.b;
		if(tmp !== void) {
			bg = tmp.gamma if(tmp.gamma !== void);
			bf = tmp.floor if(tmp.floor !== void);
			bc = tmp.ceil  if(tmp.ceil  !== void);
		}
		adjustGamma(rg, rf, rc, gg, gf, gc, bg, bf, bc);
	}

	// 色補正
	if (timeinfo.lightColor !== void && timeinfo.lightType !== void) {
		var tmp = holdAlpha;
		holdAlpha = true;
		fillLayerOperateRect(0,0,imageWidth,imageHeight,
				timeinfo.lightColor, timeinfo.lightType);

		holdAlpha = tmp;
	}
	// 明度補正
	if (timeinfo.brightness !== void && timeinfo.contrast !== void)
		light(timeinfo.brightness, timeinfo.contrast);

	// 子レイヤはやらないことにした。ap_imageとの絡みで。
//	for (var i = children.count-1; i >= 0; i--)
//		children[i].drawTimeEffect(param);
};



// applyColorCorrectionをオーバーライドするために、セーブしておく
var timeEffect_applyColorCorrection_save = AnimationLayer.applyColorCorrection;

// applyColorCorrectionをオーバーライドする。
// セーブ→ロード時に、背景やキャラクタにかけたTimeEffectがリセットされてしまう
// のを防ぐために絶対必要。
AnimationLayer.applyColorCorrection = function(layer, param)
{
	// この二つの順番を変えるだけで色合いが変わってしまうので注意。
	layer.drawTimeEffect(param);
	timeEffect_applyColorCorrection_save(layer, param);
};


// 環境を設定する。設定だけで画面は変えない。
Layer.setTimeEffect = function( time, obj = "bg" )
{
	if(time === void || time == "" ||
	   timeInfo[time] === void || timeInfo[time][obj] === void)
		return;
	Anim_loadParams = %[] if (Anim_loadParams === void);
	Anim_loadParams.timeEffect = timeInfo[time][obj];
	// ここは参照でもいい
};

