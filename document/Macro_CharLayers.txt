Class_CharLayersリファレンス

概要：
	Class_CharLayers.ksは、キャラクタのレイヤ制御を実施するクラス・
	マクロ集である。キャラクタの追加・削除が簡単に実行でき、かつ、
	一般的な制御(立ち位置指定・移動・フェードイン・フェードアウトなど)が
	簡単に指定できるように作成された。

	キャラクタがどのレイヤを使用するかはユーザが指定することができるが、
	以下は決め打ちである。
		1. １キャラクタが使用できるレイヤは1枚のみである
		2. キャラクタ用のレイヤは、(レイヤNo.が)連続でなければならない
	以上を守れば、キャラクタのフェードイン・フェードアウト、移動等が
	一命令で実行できるようになっている。

使用例:
	; ↓ 2～4レイヤを確保し、キャラクタを三人まで表示可能にする。
	[char_init layers="2 3 4"]

	; ↓ キャラクタ"美夏"を追加する。
	; 立ち絵は「服装(0,0) + 表情(20,100)」で座標指定
	[char_reg name=美夏 coordinates="0,0 20,100"]
	; ↓ キャラクタ"紅葉"を追加する。
	; 立ち絵は「服装(0,0) + 表情(20,100)」で座標指定
	[char_reg name=紅葉 coordinates="0,0 20,100"]

	; ↓美夏を表示。表示ストレージは"美夏_着物.png"と"美夏_通常.png
	[美夏 storage="着物 通常"]
	; ↓美夏を再表示。表示ストレージは"美夏_着物.png"と"美夏_微笑.png
	[美夏 storage="= 微笑"]
	; ↓紅葉を表示。表示ストレージは"紅葉_刺子.png"と"紅葉_通常.png
	[紅葉 storage="刺子 通常"]
	; ↓紅葉を表示。表示ストレージは"紅葉_刺子.png"と"紅葉_怒り.png
	[紅葉 storage="= 怒り"]

	; ↓ テンポラリでアキヒトを中央表示。ストレージは"アキヒト_普段着.png"
	[char_disp name=アキヒト storage="普段着" posx=center]

	; ↓ 美夏とアキヒトを消去。紅葉が残り、立ち位置は中央になる。
	[char_erase name="美夏 アキヒト"]
	; ↓ 紅葉を消去。800msで左にフレームアウトする。
	[char_erase name=紅葉 to=left time=800]

	
タグリファレンス：------------------------------------------------------------
パラメータを指定しなかった場合、(def)またはdefaultと書いてあるものが
デフォルト値として採用される。

[char_init]
説明:
	キャラクタレイヤを初期化する。一度初期化すると、終了するまで
	再初期化できないので注意。裏ではクラスの初期化も実行していて、
	クラスはglobal.chardatas_objとしてアクセスできる。
	キャラクタレイヤは最初に"clear.png"というファイルでクリアされるため、
	全体画面サイズ(例えば640x480とかに合わせて"clear.png"というファイルを
	用意する必要がある。
引数:
	layers=		以降使用するレイヤ番号を指定する。Macro_CharLayersは
			ここで指定したkagのレイヤを、自分のものであるとして
			使用する。当然、画面に同時表示するキャラクタ数分は
			指定する必要がある。
			レイヤは空白区切りの文字列で指定し、レイヤNo.は
			連続でなければならない。また、これらのレイヤは
			Config.tjsの中で既に確保されていなければならない。
			(def="1 2 3")
	※この他、[char_setopt]の引数が全て指定可能。
例:
	[char_init layers="2 3 4"]


[char_finish]
説明:
	[char_init]で確保していたレイヤを開放する。裏では
	クラス(global.chardatas_obj)も開放している。


[char_setopt]
説明:
	このマクロ全体の設定を指定する。設定値はグローバル変数 sf に
	セーブされるため、一度設定するとセーブデータ共通でずっと残り
	続けることに注意。
引数:
	dispalign=	キャラクタを表示する際の、自動立ち位置補正[move]の
			実行順序を指定する。(def=simultaneous)
		simultaneous	キャラクタの[trans]と[move]を同時に実行
		after		[trans]後に[move]を実行
		before		[trans]前に[move]を実行
	erasealign=	キャラクタを消去する際の、自動立ち位置補正[move]の
			実行順序を指定する。(def=after)
		simultaneous	キャラクタの[trans]と[move]を同時に実行
		after		[trans]後に[move]を実行
		before		[trans]前に[move]を実行
		no		立ち位置補正を実行しない
	aligntime=	キャラクタの自動立ち位置補正の実行時間をms単位で
			指定する。(def=300)
	alignaccel=	キャラクタの自動立ち位置補正の加速度を指定する。
			キャラクタ表示時と消去時で符号反転して使用される。
			(def=-2)
	transtime=	キャラクタ表示時と消去時の、[trans]時間を指定する。
			(def=300)
	popdownceil=	キャラクタが非発言時に暗く表示されるが、この暗さを
			0～255の範囲で指定する。(def=170)。暗くしたくなければ
			255 を指定すればよい。

[char_visible]
説明:
	キャラクタレイヤの表示フラグを設定する。つまりlayopt。
	個別のキャラクタではなく、キャラクタレイヤ群全体の表示フラグで
	あることに注意。
引数:
	visible=	表示フラグを指定する
		true	キャラクタレイヤを表示する(def)
		false	キャラクタレイヤを表示しない
		leave	キャラクタレイヤをそのままにしとく

[char_clear_all]
説明:
	全キャラクタレイヤを透明にクリアする。ただし、データは削除しない。
	表裏レイヤに"clear.png"という画像を読み込むだけ。従って、
	(画面サイズに合わせて)"clear.png"というファイルを用意する必要が
	ある。
引数:
	clear=
		true	クリアする
		false	クリアしない(というか何もしない)


[char_reg]
説明:
	キャラクタを登録する。登録、というのは、データを登録するだけで、
	画面上には何の変化もない。テンポラリキャラは登録する必要もない。
	内部で、自動的に [char_disp name=xxx ...] を [xxx ...] とするマクロを
	定義する。なお、[xxx ...] マクロは内部的には使用していないので、
	後でユーザが好きに上書きしてよい。
	※ただし、xxxには半角大文字を含まないこと。name=欄参照。
引数:
	name=		キャラクタ名(以降IDとして使用する)
			ただし、[キャラクタ名 ... ] のようなマクロを使用する
			時は、name= には半角大文字を含まないように指定する
			こと。これは、KAGがマクロを展開する時にマクロ名を
			内部的にtoLower()で小文字に変換してしまうため。
	eternal=	そのキャラクタのデータを、char_eraseなどの後にも保持
			するか。主要キャラはフラグやポイントを保持するため、
			trueに設定する。以下のinitposやcoordinatesもデータと
			して保存されるため、eternal=trueでなければ[char_erase]
			で削除されてしまうことに注意。
		true	char_eraseしてもデータは永遠に残す(def)
		false	char_eraseするとデータも消える
	pose=		次のinitposとcoordinatesの名前を指定する。一キャラクタ
			につき複数のinitpos/coordinatesが持てる(たとえば近・中
			・遠などで異なるcoordinatesにできる)ので、その名前を
			文字列で指定する。省略すると"base"になる。[char_disp]
			で使用する。
	initpos=	表示初期位置を指定する。通常は0,0であるが、たとえば
			小さなキャラを画面中央に表示したい時などは0,200などと
			指定するし、大きなキャラが画面の上や左にはみ出す時は
			-100,-100などと指定する。これは相対値であり、立ち位置
			には無関係に指定する。
	coordinates=	キャラクタ立ち絵中の部分画像データの座標。一つの
			立ち絵は、複数の部分画像を組み合わせで構成される
			(もちろん単一の立ち絵でもよい)ため、座標を相対で
			複数指定可能。デリミタはスペースで、重ね合わせ昇順に
			指定する。指定しなかった場合、全ての部分画像は
			(0,0)から表示される。
			例："0,0 100,10 150,50"で、一番下の画像を(0,0)に、
			二番目を(100,10)に、三番目を(150,50)に重ね合わせて
			表示する。KAGの[pimage]を使って実現している。
			例えば、立ち絵全体像が立ち絵+表情+漫符で構成されると
			すると、全体像=(0,0), 表情=(100,10)、漫符=(150,150)の
			位置に表示される。
			後に説明する[char_set_pose]を使用すれば、coordinates
			値は複数保存できる。立ち絵の種類に応じて顔の位置が
			異なるような場合にも対応可能。

[char_set_pose]
説明:
	[char_reg]で内部的に使われるマクロ。[char_reg]で登録した以外のpose
	を持つcoordinates群を追加したい時に使用する。ただし、ここで指定した
	poseがデフォルトになるので注意。
引数:
	name=		すべて[char_reg]と同じ
	pose=		同上
	coordinates	同上


[char_disp]
説明:
	キャラクタを表示する。[char_reg]で登録されていないキャラクタは、
	勝手に[char_reg name=%name eternal=false, coordinates="0,0"]で登録する。
	キャラクタが既に登録されていればそのデータを使う。
	キャラクタが既に表示されていれば、必要な変更を行う(立ち絵変更、立ち位置
	変更など)。
	デフォルトでは、指定したキャラのみが自動的にポップアップされる。
	あらかじめ[char_reg]で登録済みのキャラクタに限り、
	[char_disp name=xxx ...] は [xxx ...] と省略表記できる。
引数:
	name=		キャラクタ名(IDとして使用する)
	storage=	画像ファイル名(フルファイル名(拡張子除く)、または、
			name_xxxxxが指定可能。スペースで区切ったリストで
			指定する。coordinatesに従った座標に、部分画像を表示
			していくが、"="ならば前回と同じものを、"-"ならば部分
			画像を表示しない。
			例: [char_disp name="準" storage="体 顔 赤面"]
				"準_体(.jpg or .png)"を最初に、"準_顔"を次に、
				"準_赤面"をその上に表示する。
			　  [char_disp name="準" storage="= = 汗"]
				上の状態から、"準_赤面"を"準_汗"に変更する
			部分画像には、[pimage]で指定できるもの、[ap_image]で
			指定できるものが使用できる。部分画像に対して .asd が
			存在すれば、[ap_image]で表示される。
			表示優先順位は左から列挙順に低→高。ただし、[ap_image]
			は最上位となり、[pimage]で表示する画像はその下となる。
	pose=		使用するcoordinatesの名前を指定する。def="base"だが、
			一度指定すると以降は省略した場合にもそれが継続して
			使用される。coordinates=を指定した場合、登録する
			coordinates名になる。
	initpos=	初期の相対X,Y座標指定。詳細は[char_reg]参照。
			(def="0,0")
	coordinates=	[char_reg]のcoordinatesと同じ、部分画像の座標を指定
			する。[char_reg]で既にcoordinatesが指定されていた
			場合、pose名で上書きして新しく保持する。
	trans=		フェードするかどうかのフラグ。
		true	フェードして立ち絵を更新する(def)
		false	フェードしない。[backlay]と[trans]、[char_align]を
			実行しないだけで、裏画面の立ち絵は更新する。この後、
			[char_trans]を実行すれば、うまいことtransするように
			なっている。複数キャラを同時に表示・削除したい時等に
			使う。
	time=		[char_trans]のtranstimeと同じ。
	align=		キャラ整列を実行するタイミングを指定する。キャラクタを
			追加した場合など、キャラの位置を画面上で整列するが、
			その時にtransの前か、後か、同時か、それともalignを
			実行しないかを指定する。(def=[char_setopt]のdispalign)
		simultaneous
			transと同時にalignを実行する。
		before	transの前にalignを実行する。
		after	transの後にalignを実行する。
		no	alignを実行しない。
	alignchars=	立ち位置を調整するキャラクタを、空白で区切って指定
			する。ここで指定されたキャラクタのみalignで整列され、
			指定されなかったキャラクタは整列されない(表示位置を
			変更しない)。def=表示中のキャラクタ全員指定。
	aligntime=	alignの所用時間。(def=[char_setopt]のaligntime)
	posx=		立ち絵位置の指定。立ち絵の位置は、表示されるキャラクタ
			数に従って自動的に調整される。新しく表示する場合は、
			通常画面右端に追加となるが、このパラメータを指定する
			ことで、新規表示・既存表示のキャラクタを「どの位置に
			表示するか」を指定できる。
			表示済みキャラに対して指定しなかった場合は、その位置を
			キープする。表示済みキャラに対して指定した場合、その
			立ち位置に移動し、合わせて他のキャラも位置補正する。
		left	左端に表示する
		right	右端に表示する(def)
		center	中央に表示する
		実数	挿入位置の値を実数で指定する。表示されているキャラは、
			左端から1,2,3…のように整数値がつけられている。
			例えば0なら左端に、1.5なら左から二番目に挿入する。
			1.5でなくても1.1とか1.99とかでも、「間」であれば良い。
		分数	"2/5"などで、「５人表示したうち左から２番目」の位置に
			表示することができる。これは一度きりで、次のキャラが
			表示されたり、他のキャラが削除されると、強制的に自動
			位置調整されてしまうので、pinned=trueをあわせて指定し
			た方がよい。
			挿入位置は、実際の表示位置に応じて適当に決定される。
			なる。たとえば、2人表示中で2/5とすると、実数で1.045の
			位置に挿入される。
			ちなみに、表示位置の調整にはrelxを使っているので、
			relxの値が自動的に指定されることに注意。pinnedを
			指定していないと、次のalignでヘンな位置に移動されて
			しまう。逆にalignで普通の位置に戻すには、その時に
			明示的に[cha_set_relpos name=xxx relx=0]を指定する
			こと。
	eternal=	[char_reg]のeternalと同じ。ここで指定しても、既に
			[char_reg eternal=true]で登録されていたら意味はない。
		true	キャラデータを常に保持する
		false	キャラデータをキャラ消去まで保持する(def)
	popupchars=	自動的にポップアップするキャラ名。(def=nameと同じ)
			指定されなかったキャラクタはpopdownされる。
	relx=		相対X座標を指定する(def=0)。現在のキャラ表示位置は
			画面上の人数により自動的に決まっているが、そこから
			少し動かしたりできる。ちょっと横にのける、とかの時に
			使う。元に戻すにはrelx=0を指定する。
			「posx=分数」を指定した時は自動設定されるので注意。
			なお、その時はrelxを指定しても無視される…はず。
	rely=		相対Y座標を指定する(def=0)。詳細は同上。
	from=		画面上に表示されていないときにこのパラメータを指定
			すると、指定した方向から画面内へと入ってくる。
		bottom	下から入ってくる
		top	上から入ってくる
		left	左から入ってくる
		right	右から入ってくる
	accel=		char_alignや、from=が指定された時のキャラの移動
			加速度。(def=[char_setopt]のalignaccel)
	pinned=		画面上でキャラクタを固定するかどうか。詳細は
			[char_pinned]参照。一度固定すると、明示的に
			pinned=falseを指定するまで該当キャラクタは画面上に
			固定され続け、他キャラクタの追加・表示でも立ち位置が
			変わらない。
		true	固定する
		false	固定しない(def)
	motion=		キャラ表示と同時に実行するモーションを指定する。ここで
			指定されたモーションは、表示trans前から実行される
			ため、trans=falseの時(後でchar_transする時)は要注意。
			motion=""で、そのキャラに関わるすべてのモーション
			停止。
	motionloop=	モーションのループ指定。[char_motion_start]のloopタグ
			参照。
	motionpage=	モーションの対象ページ(fore/back/both)。def=both。
			キャラクタの表情を変更しながらjump、とかする時に
			bothじゃないと困るのでdef=bothになっている。
			ただし、change=の時はdef=backなので注意。
	apstart=	キャラ表示完了(trans終了)と同時に実行する部分アニメー
			ションを指定する。通常はtrans中も.asdファイル先頭の
			アニメーションは実行されてしまうため、transが終了
			してからアニメーションを開始するために増設された。
			このパラメータを指定するときは、.asd 先頭のアニメー
			ションは@clear @s であるとそれっぽく見える。
			"apname*ラベル" を空白で区切ったリスト文字列を指定。
			trans=falseの時は実行されないので、自分で
			[char_ap_animstart]を実行する必要があることに注意。
			　例：apstart="！*start Σ*oneshot"
			もちろん、！やΣはstorageで指定されて読み込まれて
			いなければならない。

	これ以外に、[char_trans]と[image]、[trans]に全パラメータを渡すので、
	それらのパラメータが指定可能。例えば、[image]のggammaなども使用できる。
	吉里吉里2.32以降なら shadow とかくっつけて立ち絵に影を表示したりも
	できる。
	http://www.ultrasync.net/dee/kr2helps/kag3doc/contents/Tags.html#image
例:
	CharAを表示する
	[char_disp name="CharA" storage="平服"]

	CharAとCharBを同時に表示する
	[backlay]
	[char_disp name="CharA" storage="平服" trans=false]
	[char_disp name="CharB" storage="平服" trans=false]
	[char_trans popupchars="CharA CharB"]


[char_erase]
説明:
	指定キャラ(複数可)をフェードアウトして削除する。削除後は、画面上に
	表示されているキャラ数に合わせて自動的に位置補正する。
	削除は、実際には [backlay] した後、当該レイヤの visible=false
	で実装している。
引数:
	name=		フェードアウトして削除するキャラクタ名。複数指定でき、
			その場合は半角空白で区切る。指定しないと全キャラ対象。
	time=		フェードアウト時間。to=を指定した時のみ退場時間を表す。
			(def=[char_setopt]のtranstime)
	align=		[char_disp]のalign参照。def=[char_setopt]のerasealign。
	aligntime=	位置補正時間(def=[char_setopt]のaligntime)
	trans=		フェード・位置補正するかどうかのフラグ(def=true)
		true	フェード・位置補正する(def)
		false	フェード・位置補正しない。[backlay]と[trans]、
			[char_align]を実行しないだけで、裏画面の立ち絵は更新
			する。この後、[char_trans]を実行すればよいように
			なっている。複数キャラを同時に表示・削除したい時等に
			使う。
	popupchars=	削除後に残ったキャラのうち、ポップアップするものを
			空白区切りで指定する。(def=無指定)
	to=		フェードアウトの代わりに、指定キャラを画面上下左右の
			指定方向に向かって退場させる。left/top/bottom/rightの
			いずれかを指定。
	accel=		to=を指定した時のみ、退場するときの加速度を指定できる。
			(def=[char_setopt]のalignaccel*-1)
	fade=		to=を指定した時のみ有効。移動しながらフェードアウト
			するかどうか。フェードアウト時間は移動時間と同じ。
		true	フェードアウトする
		false	フェードアウトしない(default)
例:
	CharAとCharBを同時に削除する
	[char_erase name="CharA CharB"]

	画面上のキャラを全員削除する
	[char_erase]


[char_trans]
説明:
	[char_erase trans=false]や[char_disp trans=false]で裏画面を操作した
	画面上のキャラクタを、「あるべき状態へ」と表示しなおす。キャラの立ち
	位置も適宜変更する。
	普通はこのタグを使うことはないが、複数キャラを同時に表示したい時には
	使える。
引数:
	time=		フェードアウト時間(def=[char_setopt]のtranstime)
	aligntime=	位置補正時間(def=[char_setopt]のaligntime)
	align=		位置補正を実施する順番を指定する。
			(def=[char_setopt]のdispalign)
		simultaneous
			位置補正を[trans]と同時に実行する
		before	位置補正を[trans]の前に実施する(主にキャラ追加時)
		after	位置補正を[trans]の後に実施する(主にキャラ削除時)
		no	位置補正を実行しない
	accel=		位置補正時の加速度を指定。0=線形移動、1以上=加速移動、
			-1以下=減速移動(def=[char_setopt]のalignaccel)
	popupchars=	ポップアップさせるキャラ名。(def=無指定)


[char_align]
説明:
	指定キャラの立ち位置を調整する。位置は、現在の表示キャラ数、該当キャラ
	の立ち位置、relx/relyから計算される。relx/relyだけ指定して、あるキャラ
	だけを動かしたい時に使用する。
引数:
	name=		キャラ名。空白で区切って複数も指定可能。指定しなければ
			全キャラが対象。
	time=		調整にかける時間。(def=[char_setopt]のaligntime)
	page=		表・裏画面指定。
		fore	(=def)
		back
	relx=		立ち位置の相対移動X座標。無指定で現在のものを流用。
	rely=		立ち位置の相対移動Y座標。無指定で現在のものを流用。
	accel=		立ち位置の調整加速度。(def=[char_setopt]のalignaccel)。
	wait=		立ち位置の調整終了を待つかどうか。def=false。


[popupchars]
説明:
	指定キャラをポップアップ(強調表示)する。というか、指定しなかった
	キャラをポップダウンする。
引数:
	popupchars=	ポップアップするキャラクタを空白区切りで指定する
			明示的に""を指定することで、全キャラポップダウン可能。
	time=		ポップアップにかかる時間を指定する(def=[char_setopt]の
			transtime)
	trans=		実際にポップアップするかどうか指定
		true	実際に画面上でポップアップする(def)
		false	裏画面だけ書き換える([trans]したら変わるように
			する)

; [char_reorder]未実装。必要かどうかもわからん。
; 説明:
; 	立ち位置を変更する。
; 引数:
;	order=		左から順にキャラクタを空白区切りで指定する。指定しな
;			かったキャラはその右に表示される。

; 同じ動作が [char_align]でできるので省略。
;[char_set_relpos]
;説明:
;	キャラクタの現在の立ち位置からの相対移動座標relx/relyを指定する。
;	これを指定することで、キャラクタを画面上で動作させることができる。
;	[char_align]と組み合わせて使うこと。
;引数:
;	name=		キャラクタ名。
;	relx=		x方向の相対移動座標。省略すると現在のrelxを引き継ぐ。
;	rely=		y方向の相対移動座標。省略すると現在のrelyを引き継ぐ。


[char_pinned]
説明:
	該当キャラを画面上で固定する。立ち絵の追加や削除によって自動的に
	位置補正されるのを防ぐ。ただし、relxやrelyでの移動は実施される。
引数:
	name=		キャラ名
	pinned=		固定するかどうか(true/false)。def=true
			※defが以前はfalseだったが1.30以降trueになったので
			　注意


[char_quake]
説明:
	指定したキャラクタ「だけ」を揺らす。[quake]タグは画面全部揺れるけど、
	これは指定キャラだけが揺れるところが異なる。内部的には
	LayerMotionPluginの[motion_quake]を呼んでいるだけ。
引数:
	name=		揺らしたいキャラ名
	time=		揺らす時間(def=200(ms))
	vmax=		縦方向ゆれ幅(def=10)
	hmax=		横方向ゆれ幅(def=10)
	speed=		揺らすスピード(ms), def=50
	wait=		揺れ終りを待つかどうかのフラグ
		true	揺れ終りを待つ
		false	揺れ終りを待たない(def)
	chaskip=	wait時、スキップできるかどうか
		true	スキップ可能(def)
		false	スキップ不可能

[char_quake_wait] または [wqsp]
説明:
	揺れ終りを待つタグ。内部的にはLayerMotionPluginの[motion_wait]を
	呼んでいるだけ。
引数:
	name=		揺れ終りを待つキャラ名
	chaskip=	スキップできるかどうか
		true	スキップ可能(def)
		false	スキップ不可能

[char_quake_stop]
説明:
	揺れを停止させる
引数:
	name=		揺れを停止させるキャラ名


[char_jump]
説明:
	指定したキャラクタをジャンプさせる。内部的にはLayerMotionPluginの
	[motion_jump]を呼んでいるだけ。
引数:
	name=		ジャンプさせたいキャラ名
	height=		ジャンプする高さ。def=30ドット
	accel=		ジャンプ→飛び降りる時の加速度。def=2(-2と+2)
	time=		ジャンプにかかる時間。def=300(ms)
	staccel=	ジャンプ時の加速度。def=-accel
	edaccel=	飛び降り時の加速度。def=accel
	sttime=		ジャンプ時の時間。def=time/2
	edtime=		飛び降り時の時間。def=time/2
	wait=		ジャンプの終了を待つかどうか。def=false
	movex=		ジャンプ中の横移動ドット。def=0(dot)
	accelx=		ジャンプ中の横移動加速度。def=0
	loop=		何度繰り返すか。0で無限。def=1
	canskip=	スキップ可能かどうか。def=true

[char_jump_wait] または [wjsp]
説明:
	ジャンプ終了を待つタグ。内部的にはLayerMotionPluginの
	[motion_wait]を呼んでいるだけ。
引数:
	name=		ジャンプ終了を待つキャラ名
	chaskip=	スキップできるかどうか
		true	スキップ可能(def)
		false	スキップ不可能

[char_jump_stop]
説明:
	ジャンプを停止させる
引数:
	name=		ジャンプを停止させるキャラ名


[char_motion_start name= motion= page= wait=]
説明:
	登録済みのモーションデータに従って、キャラクタを動作させる。
	モーションデータ詳細はLayerMotionPlugin.ksを参照。当然これが
	前提プラグインとして必要になる。
	このタグを複数列挙することで、1キャラにつき同時に複数のモーションを
	指定できる。foreとbackで別々のものを指定することもできる。
引数:
	name=
		モーションを適用するキャラ名
	motion=
		モーション名
	page=fore(def)|back
		モーションを適用するページ
	wait=true(def)|false
		モーション終了を待つかどうか

[char_motion_wait name= page= motion=]
説明:	
	[char_motion_start]で指定したキャラクタのモーション終了を待つ。
引数:
	name=
		モーション終了を待つキャラ名
	page=fore(def)|back
		モーション終了を待つページ
	motion=
		待つモーション名。省略すると、全てのモーションの終了を待つ。

[char_motion_stop name= page= motion=]
説明:	
	[char_motion_start]で指定したキャラクタのモーションを終了させる。
	実行中でも強制的に終了させ、終了後の座標は最終座標に移動する。
引数:
	name=
		モーション終了を待つキャラ名。省略すると全てのキャラの
		モーション終了を待つ
	page=fore(def)|back
		モーション終了を待つページ
	lastpos=true(def)|false
		モーション終了時に最終位置に移動するかどうか
	motion=
		停止するモーション名。省略すると全てのモーションを停止する


[setflag name= flag= val=]
説明:
	キャラのデータにフラグをセットする。eternalとして定義されたキャラに
	しか使えない(eternalでないと画面上から消えるとデータも消えるから)
	ことに注意。あとフラグなのでtrue/falseしかないことに注意。
引数:
	name=		キャラ名
	flag=		フラグ名。なんでも良い。
	val=		フラグに指定する値
		true	フラグをセット(def)
		false	フラグをリセット


[ifflag name= flag=]
説明:
	キャラデータのフラグをチェックする。[if exp="..."]の代わりに使用する。
	ので、[endif]で括らなければならないことに注意。
	そのフラグが存在しなかった場合はfalseとなる。	
引数:
	name=		キャラ名
	flag=		フラグ名


[setpoint name= val=]
説明:
	キャラデータのポイントを設定する。最初は0ポイントになっている。
	ポイントはキャラに一つしかない固有の数値。
引数:
	name=		キャラ名
	val=		ポイント(数値)


[addpoint name= val=]
説明:
	キャラデータのポイントを加減算する。[setpoint]参照。
引数:
	name=		キャラ名
	val=		ポイント(数値。正負どちらでも良い)。無指定なら1。

	※ポイント数値を取り出す場合は、以下のようにする。
	[eval exp="tp.point = getpoint( キャラ名 )"]
